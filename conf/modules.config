/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

//
// General configuration options
//

process {
    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: 'SAMPLESHEET_CHECK' {
        ext.args   = 'samplesheet.valid.csv'
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'KHMER_UNIQUEKMERS' {
        publishDir = [ enabled: false ]
    }
}

//
// Genome preparation options
//

process {
    withName: 'GUNZIP_.*' {
        publishDir = [
            path: { "${params.outdir}/genome" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: 'UNTAR_.*' {
        ext.args2 = '--no-same-owner'
        publishDir = [
            path: { "${params.outdir}/genome/index" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: 'BWA_INDEX|BOWTIE2_BUILD|STAR_GENOMEGENERATE' {
        publishDir = [
            path: { "${params.outdir}/genome/index" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: 'GFFREAD' {
        ext.args   = '--keep-exon-attrs -F -T'
        publishDir = [
            path: { "${params.outdir}/genome" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: 'GTF2BED' {
        publishDir = [
            path: { "${params.outdir}/genome" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: 'CUSTOM_GETCHROMSIZES' {
        publishDir = [
            path: { "${params.outdir}/genome" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'GENOME_BLACKLIST_REGIONS' {
        publishDir = [
            path: { "${params.outdir}/genome" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }
}

//
// Read QC and trimming options
//

if (!(params.skip_fastqc || params.skip_qc)) {
    process {
        withName: 'FASTQC' {
            ext.args = '--quiet'
            publishDir = [
                [
                    path: { "${params.outdir}/fastqc" },
                    mode: params.publish_dir_mode,
                    pattern: "*.{html}"
                ],
                [
                    path: { "${params.outdir}/fastqc/zips" },
                    mode: params.publish_dir_mode,
                    pattern: "*.{zip}"
                ]
            ]
        }
    }
}

if (!params.skip_trimming) {
    process {
        withName: 'TRIMGALORE' {
            ext.args   = {
                [
                    '--fastqc',
                    params.trim_nextseq > 0 ? "--nextseq ${params.trim_nextseq}" : '',
                    params.clip_r1 > 0 ? "--clip_r1 ${params.clip_r1}" : '',
                    params.clip_r2 > 0 ? "--clip_r2 ${params.clip_r2}" : '',
                    params.three_prime_clip_r1 > 0 ? "--three_prime_clip_r1 ${params.three_prime_clip_r1}" : '',
                    params.three_prime_clip_r2 > 0 ? "--three_prime_clip_r2 ${params.three_prime_clip_r2}" : ''
                ].join(' ').trim()
            }
            publishDir = [
                [
                    path: { "${params.outdir}/trimgalore/fastqc" },
                    mode: params.publish_dir_mode,
                    pattern: "*.{html}"
                ],
                [
                    path: { "${params.outdir}/trimgalore/fastqc/zips" },
                    mode: params.publish_dir_mode,
                    pattern: "*.{zip}"
                ],
                [
                    path: { "${params.outdir}/trimgalore/logs" },
                    mode: params.publish_dir_mode,
                    pattern: "*.txt"
                ],
                [
                    path: { "${params.outdir}/trimgalore" },
                    mode: params.publish_dir_mode,
                    pattern: "*.fq.gz",
                    enabled: params.save_trimmed
                ]
            ]
        }
    }
}

process {
    withName: 'NFCORE_CHIPSEQ:CHIPSEQ:.*:BAM_SORT_STATS_SAMTOOLS:SAMTOOLS_SORT' {
        ext.prefix = { "${meta.id}.Lb.sorted" }
        publishDir = [
            path: { "${params.outdir}/${params.aligner}/library" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_align_intermeds
        ]
    }

    withName: 'NFCORE_CHIPSEQ:CHIPSEQ:.*:BAM_SORT_STATS_SAMTOOLS:SAMTOOLS_INDEX' {
        publishDir = [
            path: { "${params.outdir}/${params.aligner}/library" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_align_intermeds
        ]
    }

    withName: 'NFCORE_CHIPSEQ:CHIPSEQ:.*:BAM_SORT_STATS_SAMTOOLS:BAM_STATS_SAMTOOLS:SAMTOOLS_.*' {
        ext.prefix = { "${meta.id}.Lb.sorted.bam" }
        publishDir = [
            path: { "${params.outdir}/${params.aligner}/library/samtools_stats/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_align_intermeds
        ]
    }
}

if (params.aligner == 'bwa') {
    process {
        withName: 'BWA_MEM' {
            ext.args   = {
                [
                    '-M',
                    params.bwa_min_score ? " -T ${params.bwa_min_score}" : '',
                    meta.read_group ? "-R ${meta.read_group}": ''
                ].join(' ').trim()
            }
            ext.args2  = '-bhS -F 0x0100 -O BAM'
            ext.prefix = { "${meta.id}.Lb" }
            publishDir = [
                path: { "${params.outdir}/${params.aligner}/library" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: false
            ]
        }
    }
}

if (params.aligner == 'bowtie2') {
    process {
        withName: 'BOWTIE2_ALIGN' {
            ext.args   = {
                [
                    meta.read_group ? "--rg-id ${meta.id} --rg SM:${meta.id - ~/_T\d+$/} --rg PL:ILLUMINA --rg LB:${meta.id} --rg PU:1" : '',
                    params.seq_center ? "--rg CN:${params.seq_center}" : ''
                ].join(' ').trim()
            }
            ext.prefix = { "${meta.id}.Lb" }
            publishDir = [
                [
                    path: { "${params.outdir}/${params.aligner}/library" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                    enabled: false
                ],
                [
                    path: { "${params.outdir}/${params.aligner}/library/unmapped" },
                    mode: params.publish_dir_mode,
                    pattern: '*.fastq.gz',
                    enabled: params.save_unaligned
                ]
            ]
        }
    }
}

if (params.aligner == 'chromap') {
    process {
        withName: 'CHROMAP_INDEX' {
            publishDir = [
                path: { "${params.outdir}/genome/index/${params.aligner}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: CHROMAP_CHROMAP {
            ext.args   = '-l 2000 --low-mem --SAM'
            ext.args3  = { meta.read_group ? "-r ${meta.read_group}" : '' }
            ext.prefix = { "${meta.id}.Lb" }
            publishDir = [
                path: { "${params.outdir}/${params.aligner}/library" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: false
            ]
        }
    }
}

if (params.aligner == 'star') {
    process {
        withName: '.*:ALIGN_STAR:STAR_ALIGN' {
            ext.args   = [
                '--runMode alignReads',
                '--alignIntronMax 1',
                '--alignEndsType EndToEnd',
                '--outSAMtype BAM Unsorted',
                '--readFilesCommand zcat',
                '--runRNGseed 0',
                '--outSAMattributes NH HI AS NM MD',
                params.save_unaligned ? '--outReadsUnmapped Fastx' : ''
            ].join(' ').trim()
            publishDir = [
                [
                    path: { "${params.outdir}/${params.aligner}/library/log" },
                    mode: params.publish_dir_mode,
                    pattern: '*.{out,tab}'
                ],
                [
                    path: { "${params.outdir}/${params.aligner}/library" },
                    mode: params.publish_dir_mode,
                    pattern: '*.bam',
                    enabled: false
                ],
                [
                    path: { "${params.outdir}/${params.aligner}/library/unmapped" },
                    mode: params.publish_dir_mode,
                    pattern: '*.fastq.gz',
                    enabled: params.save_unaligned
                ]
            ]
        }
    }
}

process {
    withName: 'PICARD_MERGESAMFILES' {
        ext.args   = '--SORT_ORDER coordinate --VALIDATION_STRINGENCY LENIENT --TMP_DIR tmp'
        ext.prefix = { "${meta.id}.mLb.sorted" }
        publishDir = [
            path: { "${params.outdir}/${params.aligner}/merged_library" },
            mode: params.publish_dir_mode,
            pattern: '*.bam',
            enabled: params.save_align_intermeds
        ]
    }

    withName: '.*:BAM_MARKDUPLICATES_PICARD:PICARD_MARKDUPLICATES' {
        ext.args   = '--ASSUME_SORTED true --REMOVE_DUPLICATES false --VALIDATION_STRINGENCY LENIENT --TMP_DIR tmp'
        ext.prefix = { "${meta.id}.mLb.mkD.sorted" }
        publishDir = [
            [
                path: { "${params.outdir}/${params.aligner}/merged_library/picard_metrics" },
                mode: params.publish_dir_mode,
                pattern: '*.metrics.txt'
            ],
            [
                path: { "${params.outdir}/${params.aligner}/merged_library" },
                mode: params.publish_dir_mode,
                pattern: '*.bam',
                enabled: params.save_align_intermeds
            ]
        ]
    }

    withName: '.*:BAM_MARKDUPLICATES_PICARD:SAMTOOLS_INDEX' {
        publishDir = [
            path: { "${params.outdir}/${params.aligner}/merged_library" },
            mode: params.publish_dir_mode,
            pattern: '*.{bai,csi}',
            enabled: params.save_align_intermeds
        ]
    }

    withName: '.*:BAM_MARKDUPLICATES_PICARD:BAM_STATS_SAMTOOLS:.*' {
        ext.prefix = { "${meta.id}.mLb.mkD.sorted.bam" }
        publishDir = [
            path: { "${params.outdir}/${params.aligner}/merged_library/samtools_stats" },
            mode: params.publish_dir_mode,
            pattern: '*.{stats,flagstat,idxstats}',
            enabled: params.save_align_intermeds
        ]
    }

    withName: 'BAMTOOLS_FILTER' {
        ext.args   = {
                [
                    meta.single_end ? '-F 0x004' : '-F 0x004 -F 0x0008 -f 0x001',
                    params.keep_dups ? '' : '-F 0x0400',
                    params.keep_multi_map ? '' : '-q 1'
                ].join(' ').trim()
        }
        ext.prefix = { meta.single_end ? "${meta.id}.mLb.clN.sorted" : "${meta.id}.mLb.flT.sorted" }
        publishDir = [
            path: { "${params.outdir}/${params.aligner}/merged_library" },
            mode: params.publish_dir_mode,
            pattern: '*.bam',
            saveAs: { (meta.single_end || params.save_align_intermeds) ? "${it}" : null }
        ]
    }

    withName: 'NFCORE_CHIPSEQ:CHIPSEQ:BAM_FILTER_BAMTOOLS:SAMTOOLS_INDEX' {
        ext.prefix = { "${meta.id}.mLb.clN.sorted" }
        publishDir = [
            path: { "${params.outdir}/${params.aligner}/merged_library" },
            mode: params.publish_dir_mode,
            pattern: '*.{bai,csi}'
        ]
    }

    withName: 'NFCORE_CHIPSEQ:CHIPSEQ:BAM_FILTER_BAMTOOLS:BAM_STATS_SAMTOOLS:.*' {
        ext.prefix = { "${meta.id}.mLb.clN.sorted.bam" }
        publishDir = [
            path: { "${params.outdir}/${params.aligner}/merged_library/samtools_stats" },
            mode: params.publish_dir_mode,
            pattern: "*.{stats,flagstat,idxstats}"
        ]
    }

    withName: 'NFCORE_CHIPSEQ:CHIPSEQ:BAM_FILTER_BAMTOOLS:SAMTOOLS_SORT' {
        ext.args   = '-n'
        ext.prefix = { "${meta.id}.mLb.flT.name_sorted" }
        publishDir = [
            path: { "${params.outdir}/${params.aligner}/merged_library" },
            mode: params.publish_dir_mode,
            pattern: '*.bam',
            enabled: params.save_align_intermeds
        ]
    }

    withName: 'BAM_REMOVE_ORPHANS' {
        ext.args   = '--only_fr_pairs'
        ext.prefix = { "${meta.id}.mLb.clN" }
        publishDir = [
            path: { "${params.outdir}/${params.aligner}/merged_library" },
            mode: params.publish_dir_mode,
            pattern: '*.bam',
            enabled: params.save_align_intermeds
        ]
    }

    withName: '.*:BAM_FILTER_BAMTOOLS:BAM_SORT_STATS_SAMTOOLS:.*' {
        ext.prefix = { "${meta.id}.mLb.clN.sorted" }
        publishDir = [
            path: { "${params.outdir}/${params.aligner}/merged_library" },
            mode: params.publish_dir_mode,
            pattern: "*.{bam,bai}"
        ]
    }

    withName: '.*:BAM_FILTER_BAMTOOLS:BAM_SORT_STATS_SAMTOOLS:BAM_STATS_SAMTOOLS:.*' {
        ext.prefix = { "${meta.id}.mLb.clN.sorted.bam" }
        publishDir = [
            path: { "${params.outdir}/${params.aligner}/merged_library/samtools_stats" },
            mode: params.publish_dir_mode,
            pattern: "*.{stats,flagstat,idxstats}"
        ]
    }

    withName: 'PHANTOMPEAKQUALTOOLS' {
        ext.args   = { "--max-ppsize=500000" }
        ext.args2  = { "-p=$task.cpus" }
        publishDir = [
            path: { "${params.outdir}/${params.aligner}/merged_library/phantompeakqualtools" },
            mode: params.publish_dir_mode,
            pattern: "*.{out,pdf}"
        ]
    }

    withName: 'MULTIQC_CUSTOM_PHANTOMPEAKQUALTOOLS' {
        publishDir = [
            path: { "${params.outdir}/${params.aligner}/merged_library/phantompeakqualtools" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:BAM_BEDGRAPH_BIGWIG_BEDTOOLS_UCSC:BEDTOOLS_GENOMECOV' {
        ext.args   = { (meta.single_end && params.fragment_size > 0) ? "-fs ${params.fragment_size}" : '' }
        ext.prefix = { "${meta.id}.mLB.clN" }
        publishDir = [
            [
                path: { "${params.outdir}/${params.aligner}/merged_library/bigwig" },
                mode: params.publish_dir_mode,
                pattern: "*.bigWig"
            ],
            [
                path: { "${params.outdir}/${params.aligner}/merged_library/bigwig/scale" },
                mode: params.publish_dir_mode,
                pattern: "*.txt"
            ]
        ]
    }

    withName: '.*:BAM_BEDGRAPH_BIGWIG_BEDTOOLS_UCSC:UCSC_BEDGRAPHTOBIGWIG' {
        ext.prefix = { "${meta.id}.mLb.clN" }
        publishDir = [
            path: { "${params.outdir}/${params.aligner}/merged_library/bigwig" },
            mode: params.publish_dir_mode,
            pattern: "*.bigWig"
        ]
    }
}

if (!params.skip_picard_metrics) {
    process {
        withName: 'PICARD_COLLECTMULTIPLEMETRICS' {
            ext.args   = '--VALIDATION_STRINGENCY LENIENT --TMP_DIR tmp'
            ext.prefix = { "${meta.id}.mLb.clN.sorted" }
            publishDir = [
                [
                    path: { "${params.outdir}/${params.aligner}/merged_library/picard_metrics" },
                    mode: params.publish_dir_mode,
                    pattern: "*_metrics"
                ],
                [
                    path: { "${params.outdir}/${params.aligner}/merged_library/picard_metrics/pdf" },
                    mode: params.publish_dir_mode,
                    pattern: "*.pdf"
                ]
            ]
        }
    }
}

if (!params.skip_preseq) {
    process {
        withName: 'PRESEQ_LCEXTRAP' {
            ext.args   = '-verbose -bam -seed 1'
            ext.prefix = { "${meta.id}.mLb.mkD" }
            publishDir = [
                path: { "${params.outdir}/${params.aligner}/merged_library/preseq" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

if (!params.skip_plot_profile) {
    process {
        withName: 'DEEPTOOLS_COMPUTEMATRIX' {
            ext.args   = 'scale-regions --regionBodyLength 1000 --beforeRegionStartLength 3000 --afterRegionStartLength 3000 --missingDataAsZero --skipZeros --smartLabels'
            ext.prefix = { "${meta.id}.mLb.clN" }
            publishDir = [
                path: { "${params.outdir}/${params.aligner}/merged_library/deepTools/plotProfile" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: 'DEEPTOOLS_PLOTPROFILE' {
            ext.prefix = { "${meta.id}.mLb.clN" }
            publishDir = [
                path: { "${params.outdir}/${params.aligner}/merged_library/deepTools/plotProfile" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: 'DEEPTOOLS_PLOTHEATMAP' {
            ext.prefix = { "${meta.id}.mLb.clN" }
            publishDir = [
                path: { "${params.outdir}/${params.aligner}/merged_library/deepTools/plotProfile" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

if (!params.skip_plot_fingerprint) {
    process {
        withName: 'DEEPTOOLS_PLOTFINGERPRINT' {
            ext.args   = { [
                '--skipZeros',
                "--numberOfSamples $params.fingerprint_bins",
                "--labels $meta.id $meta.control"
            ].join(' ').trim() }
            ext.prefix = { "${meta.id}.mLb.clN" }
            publishDir = [
                path: { "${params.outdir}/${params.aligner}/merged_library/deepTools/plotFingerprint" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

process {
    withName: 'MACS3_CALLPEAK' {
        ext.args   = [
            '--keep-dup all',
            params.narrow_peak          ? '' : "--broad --broad-cutoff ${params.broad_cutoff}",
            params.save_macs_pileup     ? '--bdg --SPMR' : '',
            params.macs_fdr             ? "--qvalue ${params.macs_fdr}" : '',
            params.macs_pvalue          ? "--pvalue ${params.macs_pvalue}" : '',
            params.aligner == "chromap" ? "--format BAM" : ''
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/${params.aligner}/merged_library/macs3/${params.narrow_peak ? 'narrow_peak' : 'broad_peak'}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'FRIP_SCORE' {
        ext.args   = '-bed -c -f 0.20'
        publishDir = [
            path: { "${params.outdir}/${params.aligner}/merged_library/macs3/${params.narrow_peak ? 'narrow_peak' : 'broad_peak'}/qc" },
            enabled: false
        ]
    }

    withName: 'MULTIQC_CUSTOM_PEAKS' {
        publishDir = [
            path: { "${params.outdir}/${params.aligner}/merged_library/macs3/${params.narrow_peak ? 'narrow_peak' : 'broad_peak'}/qc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

if (!params.skip_peak_annotation) {
    process {
        withName: '.*:BAM_PEAKS_CALL_QC_ANNOTATE_MACS3_HOMER:HOMER_ANNOTATEPEAKS' {
            ext.args   = '-gid'
            ext.prefix = { "${meta.id}_peaks" }
            publishDir = [
                path: { "${params.outdir}/${params.aligner}/merged_library/macs3/${params.narrow_peak ? 'narrow_peak' : 'broad_peak'}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }

    if (!params.skip_peak_qc) {
        process {
            withName: 'PLOT_MACS3_QC' {
                ext.args   = '-o ./ -p macs3_peak'
                publishDir = [
                    path: { "${params.outdir}/${params.aligner}/merged_library/macs3/${params.narrow_peak ? 'narrow_peak' : 'broad_peak'}/qc" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }

            withName: 'PLOT_HOMER_ANNOTATEPEAKS' {
                ext.args   = '-o ./'
                ext.prefix = 'macs3_annotatePeaks'
                publishDir = [
                    path: { "${params.outdir}/${params.aligner}/merged_library/macs3/${params.narrow_peak ? 'narrow_peak' : 'broad_peak'}/qc" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }
        }
    }
}

if (!params.skip_consensus_peaks) {
    process {
        withName: 'MACS3_CONSENSUS' {
            ext.when   = { meta.multiple_groups || meta.replicates_exist }
            ext.prefix = { "${meta.id}.consensus_peaks" }
            publishDir = [
                path: { "${params.outdir}/${params.aligner}/merged_library/macs3/${params.narrow_peak ? 'narrow_peak' : 'broad_peak'}/consensus/${meta.id}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: 'SUBREAD_FEATURECOUNTS'  {
            ext.args   = '-F SAF -O --fracOverlap 0.2'
            ext.prefix = { "${meta.id}.consensus_peaks" }
            publishDir = [
                path: { "${params.outdir}/${params.aligner}/merged_library/macs3/${params.narrow_peak ? 'narrow_peak' : 'broad_peak'}/consensus/${meta.id}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }

    if (!params.skip_peak_annotation) {
        process {
            withName: '.*:BED_CONSENSUS_QUANTIFY_QC_BEDTOOLS_FEATURECOUNTS_DESEQ2:HOMER_ANNOTATEPEAKS' {
                ext.args   = '-gid'
                ext.prefix = { "${meta.id}.consensus_peaks" }
                publishDir = [
                    path: { "${params.outdir}/${params.aligner}/merged_library/macs3/${params.narrow_peak ? 'narrow_peak' : 'broad_peak'}/consensus/${meta.id}" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }

            withName: 'ANNOTATE_BOOLEAN_PEAKS' {
                ext.prefix = { "${meta.id}.consensus_peaks" }
                publishDir = [
                    path: { "${params.outdir}/${params.aligner}/merged_library/macs3/${params.narrow_peak ? 'narrow_peak' : 'broad_peak'}/consensus/${meta.id}" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }
        }
    }

    if (!params.skip_deseq2_qc) {
        process {
            withName: 'DESEQ2_QC' {
                ext.when   = { meta.multiple_groups && meta.replicates_exist }
                ext.args   = [
                    '--id_col 1',
                    '--sample_suffix \'.mLb.clN.sorted.bam\'',
                    '--count_col 7',
                    params.deseq2_vst ? '--vst TRUE' : ''
                ].join(' ').trim()
                ext.prefix = { "${meta.id}.consensus_peaks" }
                publishDir = [
                    path: { "${params.outdir}/${params.aligner}/merged_library/macs3/${params.narrow_peak ? 'narrow_peak' : 'broad_peak'}/consensus/${meta.id}/deseq2" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }
        }
    }
}

if (!params.skip_igv) {
    process {
        withName: 'IGV' {
            publishDir = [
                [
                        path: { "${params.outdir}/igv/${params.narrow_peak ? 'narrow_peak' : 'broad_peak'}" },
                        mode: params.publish_dir_mode,
                        pattern: '*.{txt,xml}'
                ],
                [
                        path: { "${params.outdir}/genome" },
                        mode: params.publish_dir_mode,
                        pattern: '*.{fa,fasta}'
                ]
            ]
        }
    }
}

if (!params.skip_multiqc) {
    process {
        withName: 'MULTIQC' {
            ext.args   = params.multiqc_title ? "--title \"$params.multiqc_title\"" : ''
            publishDir = [
                path: { "${params.outdir}/multiqc/${params.narrow_peak ? 'narrow_peak' : 'broad_peak'}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}
